type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>To-Do List</title>
    </head>
    <body>
        <div>
          <h1 class="caption">To-Do List</h1>
        </div>
        <div>
            <input type="text" id="input-task">
            <button id="add-task-button">ADD TASK</button>
        </div>
        <div>
            <ul id="task-list">
                <li>
                    <input type="checkbox">
                    <span class="task">Email David</span>
                    <button class="delete-btn"></button>
                </li>
                <li>
                    <input type="checkbox">
                    <span class="task">Create ideal persona guide</span>
                    <button class="delete-btn"></button>
                </li>
                <li>
                    <input type="checkbox">
                    <span class="task">Set up A/B test</span>
                    <button class="delete-btn"></button>
                </li>
            </ul>
        </div>
    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const path = require('path');
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const {StageTest, correct, wrong} = require('hs-test-web');

    class TodoTest extends StageTest {

        page = this.getPage(pagePath)

        tests = [
            this.page.execute(() => {
                if (document.title !== 'To-Do List') {
                    return wrong("The title of the page should be 'To-Do List'")
                }
                return correct();
            }),
            this.page.execute(() => {
                const inputField = document.getElementById("input-task")
                if (inputField === null || inputField.tagName !== 'INPUT')
                    return wrong("Can't find input field with id '#input-task'")

                const addButton = document.getElementById("add-task-button")
                if (addButton === null || addButton.tagName !== 'BUTTON')
                    return wrong("Can't find button with id '#add-task-button'")

                this.taskList = document.getElementById("task-list")
                if (this.taskList === null || this.taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                return correct();
            }),
            this.page.execute(() => {

                const tasks = this.taskList.getElementsByTagName("li")
                if (tasks.length !== 3)
                    return wrong("Inside the <ul> tag should be 3 <li> elements!")

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }

                return correct();
            }),
            this.page.execute(() => {

                const inputField = document.getElementById("input-task")
                if (inputField.tagName !== 'INPUT')
                    return wrong("Can't find input field with id '#input-task'")

                inputField.value = "New task for the test purpose"

                const addButton = document.getElementById("add-task-button")
                if (addButton.tagName !== 'BUTTON')
                    return wrong("Can't find button with id '#add-task-button'")

                addButton.click()

                const tasks = this.taskList.getElementsByTagName("li")
                if (tasks.length !== 4)
                    return wrong("After adding a new task to the To-Do list, there should be 4 <li> tags inside the <ul> list")

                for (let task of tasks) {

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        return correct()
                    }
                }

                return wrong("Can't find task with name 'New task for the test purpose'.\n" +
                    "The task name should be placed in <span> tag with class 'task'!")
            }),
            this.page.execute(() => {

                let tasks = this.taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        const deleteButton = task.querySelector("button.delete-btn")
                        if (deleteButton === null)
                            return wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                        deleteButton.click()
                        break
                    }
                }

                tasks = this.taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <span> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        return wrong("After deleting a task with name 'New task for the test purpose' it is still in the task list!")
                    }
                }

                return correct()
            }),
            this.page.execute(async () => {

                const tasks = this.taskList.getElementsByTagName("li")

                if (tasks.length !== 3)
                    return wrong("After adding a new task to the To-Do list, there should be 3 <li> tags inside the <ul> list")

                const task = tasks[1]

                const checkbox = task.querySelector("input[type=checkbox]")

                if (checkbox.checked) {
                    return wrong("By default a checkbox should be unchecked!")
                }

                checkbox.click()

                let taskName = task.querySelector("span.task")
                if (taskName === null)
                    return wrong("Inside each <li> tag should be one <span> tag with 'task' class")

                if (!window.getComputedStyle(taskName).textDecoration.includes("line-through")) {
                    return wrong("If checkbox is checked the task name should be crossed out.\n" +
                        "The span tag with task name should have 'text-decoration: line-through' style")
                }

                checkbox.click()

                if (window.getComputedStyle(taskName).textDecoration.includes("line-through")) {
                    return wrong("If checkbox is unchecked the task name shouldn't be crossed out.\n" +
                        "The span tag with task name shouldn't have 'text-decoration: line-through' style")
                }

                return correct()
            })
        ]
    }

    it('Test stage', async function () {
        try {
            this.timeout(30000)
        } catch (ignored) {
        }
        await new TodoTest().runTests()
    }, 30000)
  learner_created: false
- name: src/scripts/app.js
  visible: true
  text: |-
    /* Delete icon: <i class="fa-solid fa-trash-can"></i> */
    let delBtnArr = document.querySelectorAll(".delete-btn");
    for (let i = 0; i < delBtnArr.length; i++) {
        delBtnArr[i].addEventListener("click", function () {
            this.parentNode.remove();
        });
    }

    function handleAddNewTasK() {
        let task = document.querySelector("#input-task").value;
        let list = document.createElement("li");
        let checkbox = document.createElement("input");
        checkbox.setAttribute("type", "checkbox");
        let span = document.createElement("span");
        span.classList.add("task");
        span.appendChild(document.createTextNode(task));
        let btnDel = document.createElement("button");
        let icon = document.createElement("i");
        icon.classList.add("fa-solid");
        icon.classList.add("fa-trash-can");
        btnDel.appendChild(icon);
        btnDel.classList.add("delete-btn");
        btnDel.addEventListener("click", function () {

            this.parentNode.remove();

        });

        list.appendChild(checkbox);
        list.appendChild(span);
        list.appendChild(btnDel);
        document.querySelector("#task-list").appendChild(list);
    }

    document.querySelector("#add-task-button").addEventListener("click", handleAddNewTasK);
    document.querySelector("#input-task").addEventListener("keypress", (event)=> {
        if (event.keyCode === 13) { // key code of the keybord key
            event.preventDefault();
            // your code to Run
            handleAddNewTasK();
        }
    });
  learner_created: true
- name: src/styles/style.css
  visible: true
  text: |-
    /* Fonts:
             font-family: 'Noto Sans', sans-serif;
             font-family: 'Vibur', cursive;
     */

    * {
        margin: 0;
        padding: 0;
        border: 0;
        outline: 0;
        vertical-align: baseline;
        background: transparent;
    }
    body {
        background-color: lightgray;
    }
    .container {
        width: 95%;
        min-height: 667px;
        margin-left: auto;
        margin-right: auto;
        position: relative;
        background-color: gray;
    }
    .row::after {
        content: "";
        clear: both;
        display: block;
        margin-bottom: 20pt;
    }
    [class*='col-'] {
        float: left;
        min-height: 1px;;+
    }
    .col-12 {
        width: 100%;
    }
    .col-6 {
        width: 50%;
    }
    .col-9 {
        width: 75%;
    }
    .col-3 {
        width: 25%;
    }
    h1 {
        text-align: center;
        font-family: 'Noto Sans', sans-serif;
    }
    #input-task {
        width: 95%;
        height: 28px;
        border-bottom: 2px palevioletred solid;
        border-left: 1px palevioletred solid;
        border-radius: 2px;
        margin-right: 2.5%;
        margin-left: 2.5%;
        background-color: lightgrey;
    }
    #add-task-button {
        width: 90%;
        margin-right: 10%;;
        height: 28px;
        border-radius: 2px;
        background-color: palevioletred;
        font-family: 'Noto Sans', sans-serif;
    }
    ul {
        list-style: none;
    }
    span {
        font-family: 'Vibur', cursive;
        display: inline-block;
        width: 80%;
    }
    .delete-btn {
        float: right;
        margin-right: 25px;
    }
    [type="checkbox"] {
        margin-left: 10px;
    }
    @media(min-height:870px) {
        .container {
            min-height: 870px;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13196#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 11 May 2022 22:01:40 UTC
record: 3
